* 'sup' is a variable you set to adjust the supply voltage

Vvdd VDD! 0 'sup'
Vgnd GND! 0 0

* Value of the power supply. 2.5V(0.25um); 1.8V(0.18um); 1.2V(0.13um); 1.0V(90nm, 65nm); 0.9V(32nm)
.param sup=2.5
.param del_t=10n

* Include the netlist into the simulation
* For example, 'inverter_sch.spi' (inverter schematic)
* For example, 'inverter_lay.spi' (inverter layout)
* You MUST get rid of the .end statement
.include './netlists/sram_netlist.sp'

* The format for the transistor is:
* TRANSISTOR_NAME DRAIN GATE SOURCE BULK
* P_18_MM refers to 0.18um-PMOS device; P_18_MM=>NMOS 
* L=length; W=width; AD=Area of Drain; AS=Area of Source; PD=Perimeter of Drain; PS=Perimeter of source; 
* M=multiplier, # of transistors in parallel

*** Sources for writing to a word in ram
* word line select
VA01 A0 a pulse(0 'sup' 'del_t * 4' 200p 200p 'del_t * 3')
VA02 a 0 pulse(0 'sup' 'del_t * 11' 200p 200p 'del_t * 1')
VA11 A1 b pulse(0 'sup' 'del_t * 4' 200p 200p 'del_t * 3')
VA12 b 0 pulse(0 'sup' 'del_t * 11' 200p 200p 'del_t * 1')
VA21 A2 c pulse(0 'sup' 'del_t * 4' 200p 200p 'del_t * 3')
VA22 c 0 pulse(0 'sup' 'del_t * 11' 200p 200p 'del_t * 1')
VA31 A3 d pulse(0 'sup' 'del_t * 4' 200p 200p 'del_t * 3')
VA32 d 0 pulse(0 'sup' 'del_t * 11' 200p 200p 'del_t * 1')

* bit write values
V0 WR0 0 pulse(0 'sup' 'del_t * 2' 200p 200p 'del_t * 1')
V1 WR1 0 pulse(0 'sup' 'del_t * 2' 200p 200p 'del_t * 1')
V2 WR2 0 pulse(0 'sup' 'del_t * 2' 200p 200p 'del_t * 1')
V3 WR3 0 pulse(0 'sup' 'del_t * 2' 200p 200p 'del_t * 1')
V4 WR4 0 pulse(0 'sup' 'del_t * 2' 200p 200p 'del_t * 1')
V5 WR5 0 pulse(0 'sup' 'del_t * 2' 200p 200p 'del_t * 1')
V6 WR6 0 pulse(0 'sup' 'del_t * 2' 200p 200p 'del_t * 1')
V7 WR7 0 pulse(0 'sup' 'del_t * 2' 200p 200p 'del_t * 1')
V8 WR8 0 pulse(0 'sup' 'del_t * 2' 200p 200p 'del_t * 1')
V9 WR9 0 pulse(0 'sup' 'del_t * 2' 200p 200p 'del_t * 1')
V10 WR10 0 pulse(0 'sup' 'del_t * 2' 200p 200p 'del_t * 1')
V11 WR11 0 pulse(0 'sup' 'del_t * 2' 200p 200p 'del_t * 1')
V12 WR12 0 pulse(0 'sup' 'del_t * 2' 200p 200p 'del_t * 1')
V13 WR13 0 pulse(0 'sup' 'del_t * 2' 200p 200p 'del_t * 1')
V14 WR14 0 pulse(0 'sup' 'del_t * 2' 200p 200p 'del_t * 1')
V15 WR15 0 pulse(0 'sup' 'del_t * 2' 200p 200p 'del_t * 1')

* write enable pulses
VWREN1 WR_EN e pulse(0 'sup' 'del_t * 2' 200p 200p 'del_t * 1')
VWREN2 e 0 pulse(0 'sup' 'del_t * 4' 200p 200p 'del_t * 1')

* precharge pulses
VPRE1 PRE m pulse(0 'sup' 'del_t * 6' 200p 200p 'del_t * .5')
VPRE2 m 0 pulse(0 'sup' 'del_t * 10' 200p 200p 'del_t * .5')

*read enable pulses
VRDEN1 RD_EN f pulse(0 'sup' 'del_t * 8' 200p 200p 'del_t * 1')
VRDEN2 f 0 pulse(0 'sup' 'del_t * 11' 200p 200p 'del_t * 1')


*** measure statements
* delay for writing (net340=BLb)
.measure tran delay_wr TRIG v(WR0) val='sup/2' rise=1
+                   TARG v(net340) val='sup/2' fall=1

.measure tran delay_rd TRIG v(A0) val='sup/2' rise=1
+		    TARG v(RD0) val='sup/2' fall=1

.measure total_delay param='delay_wr + delay_rd'
.measure max_freq param='1/total_delay'

* leakage power
.measure static_current avg i(Vvdd) from=0 to='del_t'
.measure static_power param='static_current * sup * -1'

* triggers for 10% and 90% values
.measure tran start_dynamic trig at 0n targ v(WR0) val = 'sup * .1' rise=1
.measure tran stop_dynamic trig at 0n targ v(WR0) val = 'sup * .9' rise=1

* active power
.measure dynamic_current avg i(Vvdd) from=start_dynamic to=stop_dynamic
.measure dynamic_power param='dynamic_current * sup * -1'




* Add these files if simulating 0.25um technology 
.lib "/nfs/guille/u1/c/cdsmgr/cdsmgr/pdk/CDK1.4/local/models/hspice/public/publicModel/tsmc25dN" NMOS 
.lib "/nfs/guille/u1/c/cdsmgr/cdsmgr/pdk/CDK1.4/local/models/hspice/public/publicModel/tsmc25dP" PMOS 

* Simulation control statements
.options list node post
+ accurate

* 10ps=minimum time step; 20ns=duration of the transient simulation
.tran 'del_t / 100' 'del_t * 20'

* Allows you to sweep a dc voltage parameter
*.dc

.end 
